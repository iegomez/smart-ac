// Code generated by protoc-gen-go. DO NOT EDIT.
// source: device.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetDeviceResponse struct {
	// Device ID.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The device's serial number.
	SerialNumber string `protobuf:"bytes,3,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	// The device's firmware version.
	FirmwareVersion string `protobuf:"bytes,4,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`
	// Registered at timestamp.
	RegisteredAt         *timestamp.Timestamp `protobuf:"bytes,5,opt,name=registered_at,json=registeredAt,proto3" json:"registered_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GetDeviceResponse) Reset()         { *m = GetDeviceResponse{} }
func (m *GetDeviceResponse) String() string { return proto.CompactTextString(m) }
func (*GetDeviceResponse) ProtoMessage()    {}
func (*GetDeviceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_device_31ddc4ad52243fc7, []int{0}
}
func (m *GetDeviceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDeviceResponse.Unmarshal(m, b)
}
func (m *GetDeviceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDeviceResponse.Marshal(b, m, deterministic)
}
func (dst *GetDeviceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeviceResponse.Merge(dst, src)
}
func (m *GetDeviceResponse) XXX_Size() int {
	return xxx_messageInfo_GetDeviceResponse.Size(m)
}
func (m *GetDeviceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeviceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeviceResponse proto.InternalMessageInfo

func (m *GetDeviceResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetDeviceResponse) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *GetDeviceResponse) GetFirmwareVersion() string {
	if m != nil {
		return m.FirmwareVersion
	}
	return ""
}

func (m *GetDeviceResponse) GetRegisteredAt() *timestamp.Timestamp {
	if m != nil {
		return m.RegisteredAt
	}
	return nil
}

type CreateDeviceRequest struct {
	// The device's serial number.
	SerialNumber string `protobuf:"bytes,2,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	// The device's firmware version.
	FirmwareVersion      string   `protobuf:"bytes,3,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateDeviceRequest) Reset()         { *m = CreateDeviceRequest{} }
func (m *CreateDeviceRequest) String() string { return proto.CompactTextString(m) }
func (*CreateDeviceRequest) ProtoMessage()    {}
func (*CreateDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_device_31ddc4ad52243fc7, []int{1}
}
func (m *CreateDeviceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateDeviceRequest.Unmarshal(m, b)
}
func (m *CreateDeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateDeviceRequest.Marshal(b, m, deterministic)
}
func (dst *CreateDeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateDeviceRequest.Merge(dst, src)
}
func (m *CreateDeviceRequest) XXX_Size() int {
	return xxx_messageInfo_CreateDeviceRequest.Size(m)
}
func (m *CreateDeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateDeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateDeviceRequest proto.InternalMessageInfo

func (m *CreateDeviceRequest) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *CreateDeviceRequest) GetFirmwareVersion() string {
	if m != nil {
		return m.FirmwareVersion
	}
	return ""
}

type UpdateDeviceRequest struct {
	// Device ID.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The device's serial number.
	SerialNumber string `protobuf:"bytes,3,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	// The device's firmware version.
	FirmwareVersion      string   `protobuf:"bytes,4,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateDeviceRequest) Reset()         { *m = UpdateDeviceRequest{} }
func (m *UpdateDeviceRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateDeviceRequest) ProtoMessage()    {}
func (*UpdateDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_device_31ddc4ad52243fc7, []int{2}
}
func (m *UpdateDeviceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateDeviceRequest.Unmarshal(m, b)
}
func (m *UpdateDeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateDeviceRequest.Marshal(b, m, deterministic)
}
func (dst *UpdateDeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDeviceRequest.Merge(dst, src)
}
func (m *UpdateDeviceRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateDeviceRequest.Size(m)
}
func (m *UpdateDeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDeviceRequest proto.InternalMessageInfo

func (m *UpdateDeviceRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateDeviceRequest) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *UpdateDeviceRequest) GetFirmwareVersion() string {
	if m != nil {
		return m.FirmwareVersion
	}
	return ""
}

type DeviceRequest struct {
	// The device's id.
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceRequest) Reset()         { *m = DeviceRequest{} }
func (m *DeviceRequest) String() string { return proto.CompactTextString(m) }
func (*DeviceRequest) ProtoMessage()    {}
func (*DeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_device_31ddc4ad52243fc7, []int{3}
}
func (m *DeviceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceRequest.Unmarshal(m, b)
}
func (m *DeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceRequest.Marshal(b, m, deterministic)
}
func (dst *DeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceRequest.Merge(dst, src)
}
func (m *DeviceRequest) XXX_Size() int {
	return xxx_messageInfo_DeviceRequest.Size(m)
}
func (m *DeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceRequest proto.InternalMessageInfo

func (m *DeviceRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeviceBySerialNumberRequest struct {
	// The device's id.
	SerialNumber         string   `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceBySerialNumberRequest) Reset()         { *m = DeviceBySerialNumberRequest{} }
func (m *DeviceBySerialNumberRequest) String() string { return proto.CompactTextString(m) }
func (*DeviceBySerialNumberRequest) ProtoMessage()    {}
func (*DeviceBySerialNumberRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_device_31ddc4ad52243fc7, []int{4}
}
func (m *DeviceBySerialNumberRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceBySerialNumberRequest.Unmarshal(m, b)
}
func (m *DeviceBySerialNumberRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceBySerialNumberRequest.Marshal(b, m, deterministic)
}
func (dst *DeviceBySerialNumberRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceBySerialNumberRequest.Merge(dst, src)
}
func (m *DeviceBySerialNumberRequest) XXX_Size() int {
	return xxx_messageInfo_DeviceBySerialNumberRequest.Size(m)
}
func (m *DeviceBySerialNumberRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceBySerialNumberRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceBySerialNumberRequest proto.InternalMessageInfo

func (m *DeviceBySerialNumberRequest) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

// For now, this doesn't need a user id so it's empty.
type ListDeviceRequest struct {
	// Max amount of devices to retrieve.
	Limit int64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// Offset for retrieving devices.
	Offset               int64    `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListDeviceRequest) Reset()         { *m = ListDeviceRequest{} }
func (m *ListDeviceRequest) String() string { return proto.CompactTextString(m) }
func (*ListDeviceRequest) ProtoMessage()    {}
func (*ListDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_device_31ddc4ad52243fc7, []int{5}
}
func (m *ListDeviceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListDeviceRequest.Unmarshal(m, b)
}
func (m *ListDeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListDeviceRequest.Marshal(b, m, deterministic)
}
func (dst *ListDeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDeviceRequest.Merge(dst, src)
}
func (m *ListDeviceRequest) XXX_Size() int {
	return xxx_messageInfo_ListDeviceRequest.Size(m)
}
func (m *ListDeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListDeviceRequest proto.InternalMessageInfo

func (m *ListDeviceRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListDeviceRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type ListDeviceResponse struct {
	TotalCount           int64                `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Devices              []*GetDeviceResponse `protobuf:"bytes,2,rep,name=devices,proto3" json:"devices,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ListDeviceResponse) Reset()         { *m = ListDeviceResponse{} }
func (m *ListDeviceResponse) String() string { return proto.CompactTextString(m) }
func (*ListDeviceResponse) ProtoMessage()    {}
func (*ListDeviceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_device_31ddc4ad52243fc7, []int{6}
}
func (m *ListDeviceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListDeviceResponse.Unmarshal(m, b)
}
func (m *ListDeviceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListDeviceResponse.Marshal(b, m, deterministic)
}
func (dst *ListDeviceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDeviceResponse.Merge(dst, src)
}
func (m *ListDeviceResponse) XXX_Size() int {
	return xxx_messageInfo_ListDeviceResponse.Size(m)
}
func (m *ListDeviceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDeviceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListDeviceResponse proto.InternalMessageInfo

func (m *ListDeviceResponse) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ListDeviceResponse) GetDevices() []*GetDeviceResponse {
	if m != nil {
		return m.Devices
	}
	return nil
}

func init() {
	proto.RegisterType((*GetDeviceResponse)(nil), "api.GetDeviceResponse")
	proto.RegisterType((*CreateDeviceRequest)(nil), "api.CreateDeviceRequest")
	proto.RegisterType((*UpdateDeviceRequest)(nil), "api.UpdateDeviceRequest")
	proto.RegisterType((*DeviceRequest)(nil), "api.DeviceRequest")
	proto.RegisterType((*DeviceBySerialNumberRequest)(nil), "api.DeviceBySerialNumberRequest")
	proto.RegisterType((*ListDeviceRequest)(nil), "api.ListDeviceRequest")
	proto.RegisterType((*ListDeviceResponse)(nil), "api.ListDeviceResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DeviceServiceClient is the client API for DeviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceServiceClient interface {
	// Create creates the given device.
	Create(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Get returns the device matching the given id.
	Get(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*GetDeviceResponse, error)
	// Get returns the device matching the given id.
	GetBySerialNumber(ctx context.Context, in *DeviceBySerialNumberRequest, opts ...grpc.CallOption) (*GetDeviceResponse, error)
	// List returns the available devices.
	List(ctx context.Context, in *ListDeviceRequest, opts ...grpc.CallOption) (*ListDeviceResponse, error)
	// Delete deletes the device matching the given id.
	Delete(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Update updates the device matching the given id.
	Update(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type deviceServiceClient struct {
	cc *grpc.ClientConn
}

func NewDeviceServiceClient(cc *grpc.ClientConn) DeviceServiceClient {
	return &deviceServiceClient{cc}
}

func (c *deviceServiceClient) Create(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.DeviceService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) Get(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*GetDeviceResponse, error) {
	out := new(GetDeviceResponse)
	err := c.cc.Invoke(ctx, "/api.DeviceService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetBySerialNumber(ctx context.Context, in *DeviceBySerialNumberRequest, opts ...grpc.CallOption) (*GetDeviceResponse, error) {
	out := new(GetDeviceResponse)
	err := c.cc.Invoke(ctx, "/api.DeviceService/GetBySerialNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) List(ctx context.Context, in *ListDeviceRequest, opts ...grpc.CallOption) (*ListDeviceResponse, error) {
	out := new(ListDeviceResponse)
	err := c.cc.Invoke(ctx, "/api.DeviceService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) Delete(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.DeviceService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) Update(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.DeviceService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceServiceServer is the server API for DeviceService service.
type DeviceServiceServer interface {
	// Create creates the given device.
	Create(context.Context, *CreateDeviceRequest) (*empty.Empty, error)
	// Get returns the device matching the given id.
	Get(context.Context, *DeviceRequest) (*GetDeviceResponse, error)
	// Get returns the device matching the given id.
	GetBySerialNumber(context.Context, *DeviceBySerialNumberRequest) (*GetDeviceResponse, error)
	// List returns the available devices.
	List(context.Context, *ListDeviceRequest) (*ListDeviceResponse, error)
	// Delete deletes the device matching the given id.
	Delete(context.Context, *DeviceRequest) (*empty.Empty, error)
	// Update updates the device matching the given id.
	Update(context.Context, *UpdateDeviceRequest) (*empty.Empty, error)
}

func RegisterDeviceServiceServer(s *grpc.Server, srv DeviceServiceServer) {
	s.RegisterService(&_DeviceService_serviceDesc, srv)
}

func _DeviceService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DeviceService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).Create(ctx, req.(*CreateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DeviceService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).Get(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetBySerialNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceBySerialNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetBySerialNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DeviceService/GetBySerialNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetBySerialNumber(ctx, req.(*DeviceBySerialNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DeviceService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).List(ctx, req.(*ListDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DeviceService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).Delete(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DeviceService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).Update(ctx, req.(*UpdateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeviceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.DeviceService",
	HandlerType: (*DeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _DeviceService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DeviceService_Get_Handler,
		},
		{
			MethodName: "GetBySerialNumber",
			Handler:    _DeviceService_GetBySerialNumber_Handler,
		},
		{
			MethodName: "List",
			Handler:    _DeviceService_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DeviceService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DeviceService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "device.proto",
}

func init() { proto.RegisterFile("device.proto", fileDescriptor_device_31ddc4ad52243fc7) }

var fileDescriptor_device_31ddc4ad52243fc7 = []byte{
	// 547 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x95, 0xe3, 0x36, 0x9f, 0xbe, 0x9b, 0xa4, 0x90, 0x9b, 0x2a, 0x35, 0x6e, 0xa5, 0x44, 0x46,
	0x42, 0x21, 0x12, 0x0e, 0x0a, 0xbb, 0x6e, 0x50, 0x7f, 0x50, 0x37, 0x05, 0x24, 0x07, 0x10, 0xbb,
	0x68, 0x52, 0xdf, 0x44, 0x23, 0xc5, 0x1e, 0xe3, 0x99, 0x14, 0x45, 0x55, 0x36, 0xbc, 0x02, 0x8f,
	0xc1, 0x96, 0x37, 0xe1, 0x15, 0x78, 0x10, 0x94, 0x19, 0x5b, 0x24, 0xb5, 0x83, 0xd8, 0xb0, 0xb2,
	0xe6, 0xce, 0x9d, 0x73, 0x8e, 0xcf, 0x3d, 0x17, 0xea, 0x21, 0xdd, 0xf2, 0x1b, 0xf2, 0x93, 0x54,
	0x28, 0x81, 0x36, 0x4b, 0xb8, 0x7b, 0x32, 0x13, 0x62, 0x36, 0xa7, 0x01, 0x4b, 0xf8, 0x80, 0xc5,
	0xb1, 0x50, 0x4c, 0x71, 0x11, 0x4b, 0xd3, 0xe2, 0x76, 0xb2, 0x5b, 0x7d, 0x9a, 0x2c, 0xa6, 0x03,
	0xc5, 0x23, 0x92, 0x8a, 0x45, 0x49, 0xd6, 0x70, 0x7c, 0xbf, 0x81, 0xa2, 0x44, 0x2d, 0xcd, 0xa5,
	0xf7, 0xdd, 0x82, 0xe6, 0x15, 0xa9, 0x4b, 0x4d, 0x1a, 0x90, 0x4c, 0x44, 0x2c, 0x09, 0x0f, 0xa0,
	0xc2, 0x43, 0xc7, 0xea, 0x5a, 0x3d, 0x3b, 0xa8, 0xf0, 0x10, 0x1f, 0x43, 0x43, 0x52, 0xca, 0xd9,
	0x7c, 0x1c, 0x2f, 0xa2, 0x09, 0xa5, 0x8e, 0xdd, 0xb5, 0x7a, 0xff, 0x07, 0x75, 0x53, 0x7c, 0xa3,
	0x6b, 0xf8, 0x14, 0x1e, 0x4e, 0x79, 0x1a, 0x7d, 0x66, 0x29, 0x8d, 0x6f, 0x29, 0x95, 0x5c, 0xc4,
	0xce, 0x9e, 0xee, 0x7b, 0x90, 0xd7, 0x3f, 0x98, 0x32, 0xbe, 0x84, 0x46, 0x4a, 0x33, 0x2e, 0x15,
	0xa5, 0x14, 0x8e, 0x99, 0x72, 0xf6, 0xbb, 0x56, 0xaf, 0x36, 0x74, 0x7d, 0x23, 0xd5, 0xcf, 0xa5,
	0xfa, 0xef, 0xf2, 0x7f, 0x09, 0xea, 0xbf, 0x1f, 0x9c, 0x29, 0x8f, 0xa0, 0x75, 0x91, 0x12, 0x53,
	0x94, 0x0b, 0xff, 0xb4, 0x20, 0xa9, 0x8a, 0x3a, 0x2b, 0x7f, 0xa9, 0xd3, 0x2e, 0xd5, 0xe9, 0x2d,
	0xa0, 0xf5, 0x3e, 0x09, 0x0b, 0x34, 0xff, 0xd8, 0x1e, 0xaf, 0x03, 0x8d, 0x3f, 0x12, 0x7a, 0xe7,
	0x70, 0x6c, 0x1a, 0xce, 0x97, 0xa3, 0x0d, 0x8e, 0x9d, 0x36, 0x58, 0x45, 0x3d, 0xde, 0x19, 0x34,
	0xaf, 0xb9, 0x54, 0xdb, 0x44, 0x87, 0xb0, 0x3f, 0xe7, 0x11, 0x57, 0x19, 0x97, 0x39, 0x60, 0x1b,
	0xaa, 0x62, 0x3a, 0x95, 0xa4, 0xb4, 0x9f, 0x76, 0x90, 0x9d, 0xbc, 0x19, 0xe0, 0x26, 0x44, 0x16,
	0x9e, 0x0e, 0xd4, 0x94, 0x50, 0x6c, 0x3e, 0xbe, 0x11, 0x8b, 0x38, 0x47, 0x02, 0x5d, 0xba, 0x58,
	0x57, 0xf0, 0x39, 0xfc, 0x67, 0x42, 0x2e, 0x9d, 0x4a, 0xd7, 0xee, 0xd5, 0x86, 0x6d, 0x9f, 0x25,
	0xdc, 0x2f, 0xc4, 0x30, 0xc8, 0xdb, 0x86, 0xdf, 0xf6, 0x72, 0x47, 0x46, 0x94, 0xae, 0x3f, 0x38,
	0x82, 0xaa, 0x09, 0x00, 0x3a, 0xfa, 0x71, 0x49, 0x1a, 0xdc, 0x76, 0x21, 0x4e, 0xaf, 0xd6, 0xc9,
	0xf7, 0x8e, 0xbe, 0xfc, 0xf8, 0xf9, 0xb5, 0xd2, 0xf4, 0xea, 0x7a, 0xa3, 0x32, 0x8e, 0x53, 0xab,
	0x8f, 0xd7, 0x60, 0x5f, 0x91, 0x42, 0xd4, 0x88, 0xf7, 0xb1, 0x4a, 0x25, 0x7a, 0x8f, 0x34, 0x56,
	0x0b, 0x9b, 0x9b, 0x58, 0x83, 0x3b, 0x1e, 0xae, 0x70, 0xa5, 0x37, 0x6b, 0x7b, 0x42, 0xd8, 0xdd,
	0xc0, 0x2e, 0x1d, 0xde, 0x4e, 0x26, 0x5f, 0x33, 0xf5, 0xf0, 0xc9, 0x16, 0xd3, 0x64, 0xf9, 0xcc,
	0x4c, 0x75, 0x70, 0xb7, 0x35, 0xf2, 0x15, 0xbe, 0x86, 0xbd, 0xf5, 0x70, 0xd0, 0xe0, 0x15, 0x46,
	0xed, 0x1e, 0x15, 0xea, 0x19, 0xd1, 0xa1, 0x26, 0x3a, 0xc0, 0x2d, 0x7b, 0xf0, 0x2d, 0x54, 0x2f,
	0x69, 0x4e, 0x8a, 0x76, 0xd8, 0x53, 0x6e, 0x75, 0x66, 0x4f, 0xbf, 0xc4, 0x9e, 0x8f, 0x50, 0x35,
	0xbb, 0x95, 0x4d, 0xb0, 0x64, 0xd1, 0x76, 0xc2, 0x9e, 0x68, 0xd8, 0xb6, 0x5b, 0x84, 0x3d, 0xb5,
	0xfa, 0x93, 0xaa, 0xee, 0x7e, 0xf1, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x29, 0xd3, 0x20, 0x0c, 0x4b,
	0x05, 0x00, 0x00,
}
