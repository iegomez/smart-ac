syntax = "proto3";

package api;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";


// DeviceService is the service managing the devices.
service DeviceService {
    // Create creates the given device.
    rpc Create(CreateDeviceRequest) returns (google.protobuf.Empty) {
        option(google.api.http) = {
            post: "/api/devices"
            body: "*"
        };
    }

    // Get returns the device matching the given id.
    rpc Get(DeviceRequest) returns (GetDeviceResponse) {
        option (google.api.http) = {
            get: "/api/devices/{id}"
        };
    }

    // GetDeviceKey returns the device's api key'.
    rpc GetAPIKey(DeviceRequest) returns (GetDeviceKeyResponse) {
      option (google.api.http) = {
          get: "/api/devices/{id}/key"
      };
  }

    // Get returns the device matching the given id.
    rpc GetBySerialNumber(DeviceBySerialNumberRequest) returns (GetDeviceResponse) {
      option (google.api.http) = {
          get: "/api/devices/by-serial/{serial_number}"
      };
    }

    // List returns the available devices.
    rpc List(ListDeviceRequest) returns (ListDeviceResponse) {
        option (google.api.http) = {
            get: "/api/devices"
        };
    }

    // ListAll returns all the available devices (used at UI filtering).
    rpc ListAll(google.protobuf.Empty) returns (ListDeviceResponse) {
      option (google.api.http) = {
          get: "/api/all-devices"
      };
    }

    // Delete deletes the device matching the given id.
    rpc Delete(DeviceRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
          delete: "/api/devices/{id}"
      };
    }

    // Update updates the device matching the given id.
    rpc Update(UpdateDeviceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/devices/{id}"
            body: "*"
        };
    }

    // UpdateAPIKey updates the device's api key.
    rpc UpdateAPIKey(DeviceRequest) returns (GetDeviceKeyResponse) {
      option (google.api.http) = {
          put: "/api/devices/{id}/key"
          body: "*"
      };
    }

}

//Holds a device response for the UI.
message GetDeviceResponse {
  // Device ID.
  int64 id = 1 [json_name = "id"];

  // ID of the owner user.
  //int64 user_id = 2 [json_name = "userID"];

  // The device's serial number.
  string serial_number = 3 [json_name = "serialNumber"];
  
  // The device's firmware version.
  string firmware_version = 4 [json_name = "firmwareVersion"];

  // Registered at timestamp.
  google.protobuf.Timestamp registered_at = 5 [json_name = "registeredAt"];
}

//Return the device's newly generated key.
message GetDeviceKeyResponse {
  //Api key.
  string api_key = 1 [json_name = "apiKey"];
}

//Request to create a device.
message CreateDeviceRequest {
  // ID of the owner user.
  //int64 user_id = 1 [json_name = "userID"];

  // The device's serial number.
  string serial_number = 2 [json_name = "serialNumber"];
  
  // The device's firmware version.
  string firmware_version = 3 [json_name = "firmwareVersion"];
}

//Request to update the device.
message UpdateDeviceRequest {
  // Device ID.
  int64 id = 1 [json_name = "id"];

  // ID of the owner user.
  //int64 user_id = 2 [json_name = "userID"];

  // The device's serial number.
  string serial_number = 3 [json_name = "serialNumber"];
  
  // The device's firmware version.
  string firmware_version = 4 [json_name = "firmwareVersion"];
}

//Request to address a given device.
message DeviceRequest {
  // The device's id.
  int64 id = 1 [json_name = "id"];
}

//Request device by serial number.
message DeviceBySerialNumberRequest {
  // The device's serial number.
  string serial_number = 1 [json_name = "serialNumber"];
}

//For now, this doesn't need a user id so it's empty.
message ListDeviceRequest {
  // Max amount of devices to retrieve.
  int64 limit = 1 [json_name = "limit"];
  // Offset for retrieving devices.
  int64 offset = 2 [json_name = "offset"];
}

//List devices message.
message ListDeviceResponse {
  //Total amount of devices.
  int64 total_count = 1 [json_name = "totalCount"];
  //Devices found given the request restrictions.
  repeated GetDeviceResponse result = 2 [json_name = "result"];
}

